<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Converters" id="Converters">

    <show-structure depth="2"/>

    <p>
        Converters are a core part of the Kord Extensions command framework.
        They provide a way to convert arguments provided by Discord into rich data types, handling parsing and
        validation, and making sure you get the types you expect.
    </p>

    <chapter title="Converter Types" id="types">
        <p>
            As converters support multiple parsing strategies, they're divided into specific types.
            Each type handles its arguments in a different way, and some are limited to specific types of commands:
        </p>

        <table style="header-row">
            <tr>
                <td>Type</td>
                <td>Commands</td>
                <td>Description</td>
            </tr>

            <tr id="converter-types-default:div:bottom">
                <td>Single</td>
                <td>All</td>

                <td>
                    The default converter type, which represents a single, mandatory command argument.
                </td>
            </tr>

            <tr>
                <td>Defaulting</td>
                <td>All</td>

                <td>
                    A converter type that represents an optional command argument, with a specified default value.
                    The default value will be used when no argument is provided.
                </td>
            </tr>

            <tr id="converter-types-multiple:div:bottom">
                <td>Optional</td>
                <td>All</td>

                <td>
                    A converter type that represents an optional command argument, with a default value of
                    <code>null</code>.
                    The default value will be used when no argument is provided.
                </td>
            </tr>

            <tr>
                <td>Coalescing</td>
                <td>All</td>

                <td>
                    <p>
                        A converter type that attempts to consume as many arguments as possible, combining them into a
                        single value.
                        This converter type will stop at the first argument that it can't parse, passing control to the
                        next converter.
                    </p>

                    <p>
                        <format style="bold">Note:</format> Coalescing converters will only ever parse a single value
                        when used in a slash command, as Discord does not support argument types that accept multiple
                        values.
                    </p>
                </td>
            </tr>

            <tr id="converter-types-unique:div:bottom">
                <td>List</td>
                <td>All</td>

                <td>
                    <p>
                        A converter type that acts like a coalescing converter, but which returns a list of parsed arguments
                        instead of a single combined value.
                    </p>

                    <p>
                        <format style="bold">Note:</format> List converters will only ever parse a single value
                        when used in a slash command, as Discord does not support argument types that accept multiple
                        values.
                    </p>
                </td>
            </tr>

            <tr>
                <td>Choice</td>
                <td>All</td>

                <td>
                    A converter type that represents a single argument that is limited to a predefined set of specific
                    choices.
                    When used with <a href="Slash-Commands.topic" />, user input will be limited to the given choices.
                </td>
            </tr>
        </table>
    </chapter>

    <chapter title="Usage" id="usage">
        <p>
            Converters provide builder functions that you can use to define your command arguments.
            These functions are available for use within classes that extend <code>Arguments</code>, as briefly
            explained on the <a href="Commands.topic" anchor="arguments-classes">commands overview page</a>.
        </p>

        <p>
            Once you've created your arguments class, you'll need to figure out which converter functions you'll need.
            You can figure out the name of the relevant function by following these rules:
        </p>

        <list>
            <li>
                Single converters simply use the name of the argument type — for example, <code>string</code>,
                <code>int</code>, <code>message</code>.
            </li>

            <li>
                List converters use the single converter name with the <code>List</code> suffix — for example,
                <code>stringList</code>, <code>intList</code>, <code>messageList</code>.
            </li>

            <li>
                All other converter types add prefixes to the single converter name — for example,
                <code>coalescingString</code>, <code>defaultingInt</code>, <code>optionalMessage</code>.
            </li>

            <li>
                Defaulting and optional converters may be combined with other types, with an additional suffix
                added to the single converter name — for example, <code>coalescingOptionalString</code>.
            </li>
        </list>

        <tip>
            If you're not sure which converter function you need, it's often quicker to use your IDE's auto-completion
            functionality.
            Start typing and your IDE should help you out!
        </tip>

        <code-block lang="kotlin" collapsible="true" collapsed-title="Usage Example">
            inner class WelcomeArgs : Arguments() {
                val target by user {
                    name = "target"
                    description = "User to welcome"
                }

                val message by defaultingString {
                    name = "message"
                    description = "Message to send to the user"

                    defaultValue = "Welcome to the server, {TARGET}!"
                }
            }
        </code-block>
    </chapter>

    <chapter title="Converter Settings" id="settings">
        <p>
            All converters must be specified via delegation, as explained in the example above.
            Each converter builder function exposes a set of options that can be used to customize the behavior of the
            converter in question.
        </p>

        <note>
            While the APIs defined below are standard APIs provided by Kord Extensions, it's worth noting that
            individual converters may provide extra settings.
            These extra settings should be provided in the documentation for the converter in question, but you can
            always inspect the builder functions in your IDE if you need to.
        </note>

        <chapter title="Common Settings" id="settings-all">
            <chapter title="Properties" id="settings-all-properties">
                <table style="both">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr id="settings-all-properties-required:header:text:center">
                        <td colspan="4">
                            Required Properties
                        </td>
                    </tr>

                    <tr>
                        <td><code>description</code></td>
                        <td><code>Key</code></td>

                        <td>
                            <format style="bold">Required:</format>
							<a href="Internationalization.topic" anchor="using-translations-translating-keys">
								Key object
							</a> representing a short description of the argument, which explains
                            what it's for.
                        </td>
                    </tr>

                    <tr>
                        <td><code>name</code></td>
                        <td><code>Key</code></td>

                        <td>
                            <p>
                                <format style="bold">Required:</format>
								<a href="Internationalization.topic" anchor="using-translations-translating-keys">
									Key object
								</a> representing the argument's name.
                            </p>

                            <p>
                                For <a href="Chat-Commands.topic"/>, this name is displayed in help commands and used
                                to refer to the argument by name when specified as a keyword argument.
                            </p>

                            <p>
                                For <a href="Slash-Commands.topic"/>, this name is displayed within the Discord client,
                                where it's used to identify the argument.
                            </p>
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Auto-Completion" id="settings-all-autocomplete">
            <p>
                When working with slash commands, Discord supports the ability to provide suggestions to the user
                when they're filling out specific arguments.
                You can use the <code>autoComplete</code> builder when defining your argument if you wish to
                support this.
            </p>

            <tip>
                If you're using a simple argument type (and you only need a specific, predefined set of options),
                consider using a choice converter instead.
                Choice converters do not need to contact your bot to retrieve the list of possible options, which
                makes your command a lot faster to work with.
            </tip>

            <p>
                The <code>autoComplete</code> builder is a receiver function against the
                <code>AutoCompleteInteraction</code> type, with an <code>event</code> argument of the
                <code>AutoCompleteInteractionCreateEvent</code> type.
                A number of APIs are available to make things easier.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                class AutoCompleteArgs : Arguments() {
                    private val optionsMap = mapOf(
                        "One" to "1",
                        "Two" to "2",
                        "Three" to "3",
                        "Four" to "4",
                        "Five" to "5",
                        "Six" to "6",
                        "Seven" to "7",
                        "Eight" to "8",
                        "Nine" to "9",
                        "Ten" to "10",
                    )

                    val arg by string {
                        name = "input"
                        description = "Autocomplete argument"

                        autoComplete {
                            suggestStringMap(optionsMap)
                        }
                    }
                }
            </code-block>

            <chapter title="Functions" id="settings-all-autocomplete-functions">
                <p>
                    All the below functions are used to suggest potential argument values to the user.
                    They automatically limit themselves to suggesting up to the maximum possible number of values,
                    and they support the following arguments:
                </p>

                <list>
                    <li>
                        <p>
                            <code>strategy</code> - the filtering strategy to use, based on the data the user has
                            entered so far.
                            While it's possible to define your own, the following are provided:
                        </p>

                        <list>
                            <li>
                                <code>FilterStrategy.Contains</code> - Filter options based on whether they contain
                                the provided data.
                            </li>

                            <li>
                                <code>FilterStrategy.Prefix</code> - Filter options based on whether they start
                                with the provided data.
                            </li>

                            <li>
                                <code>FilterStrategy.Suffix</code> - Filter options based on whether they end
                                with the provided data.
                            </li>
                        </list>
                    </li>

                    <li>
                        <p>
                            <code>suggestInputWithoutMatches</code> - When the given filtering strategy doesn't
                            match anything, whether to suggest the user's provided data as a possible option.
                            This may be useful for arguments that represent a form of data that will be created if
                            an existing value isn't found.
                        </p>

                        <p>
                            Defaults to <code>false</code>.
                        </p>
                    </li>
                </list>

                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>suggestDoubleCollection</code></td>

                        <td>
                            Use a collection (such as a list) of doubles to suggest potential argument values to
                            the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestDoubleMap</code></td>

                        <td>
                            <p>
                                Use a map of strings to doubles to suggest potential argument values to the user.
                            </p>

                            <p>
                                The string keys are displayed to the user, and mapped to their corresponding value
                                when the argument is filled.
                                They should be a human-readable representation of the given value.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestIntCollection</code></td>

                        <td>
                            Use a collection (such as a list) of integers to suggest potential argument values to
                            the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestIntMap</code></td>

                        <td>
                            <p>
                                Use a map of strings to integers to suggest potential argument values to the user.
                            </p>

                            <p>
                                The string keys are displayed to the user, and mapped to their corresponding value
                                when the argument is filled.
                                They should be a human-readable representation of the given value.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestLongCollection</code></td>

                        <td>
                            Use a collection (such as a list) of longs to suggest potential argument values to
                            the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestLongMap</code></td>

                        <td>
                            <p>
                                Use a map of strings to longs to suggest potential argument values to the user.
                            </p>

                            <p>
                                The string keys are displayed to the user, and mapped to their corresponding value
                                when the argument is filled.
                                They should be a human-readable representation of the given value.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestNumberCollection</code></td>

                        <td>
                            Use a collection (such as a list) of doubles (Discord's default number type) to suggest
                            potential argument values to the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestNumberMap</code></td>

                        <td>
                            <p>
                                Use a map of strings to doubles (Discord's default number type)
                                to suggest potential argument values to the user.
                            </p>

                            <p>
                                The string keys are displayed to the user, and mapped to their corresponding value
                                when the argument is filled.
                                They should be a human-readable representation of the given value.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestStringCollection</code></td>

                        <td>
                            Use a collection (such as a list) of strings to suggest potential argument values to
                            the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>suggestStringMap</code></td>

                        <td>
                            <p>
                                Use a map of string keys to values to suggest potential argument values to the user.
                            </p>

                            <p>
                                The string keys are displayed to the user, and mapped to their corresponding value
                                when the argument is filled.
                                They should be a human-readable representation of the given value.
                            </p>
                        </td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Properties" id="settings-all-autocomplete-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>focusedOption</code></td>
                        <td><code>OptionValue&lt;*&gt;</code></td>

                        <td>
                            The argument that's currently being focused by the user.
                            You can use this property to retrieve the data the user has entered for this argument
                            so far.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Mutators" id="settings-all-mutators">
            <p>
                Mutators allow you to modify the argument's value after it's been filled.
                This is only useful in a limited number of use-cases, but may be handy for providing light
                customizations for existing converter types.
            </p>

            <p>
                To define a mutator, call the <code>mutate</code> builder function.
                This builder takes the existing value as its first argument, expecting the modified value to be
                the return value.
            </p>

            <p>
                No additional APIs are provided.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                class MutatedArgs : Arguments() {
                    val quoted by string {
                        name = "input"
                        description = "Mutated argument"

                        mutate { value ->
                            "Quoted: \"$value\""
                        }
                    }
                }
            </code-block>
        </chapter>

        <chapter title="Validators" id="settings-all-validators">
            <p>
                Validators allow you to validate the argument's value after it's been filled, potentially returning
                an error to the user if the value fails to validate.
            </p>

            <p>
                To define a validator, call the <code>validate</code> builder function.
                This builder is a receiver function against the <code>ValidationContext</code> type, which provides
                an API similar to that of a <a href="Checks.topic">check context</a>.
            </p>

            <code-block lang="kotlin" collapsible="true" collapsed-title="Example">
                class ValidatedArgs : Arguments() {
                    val odd by int {
                        name = "input"
                        description = "Validated argument"

                        validate {
                            failIf("Odd numbers only, please!") {
                                value % 2 == 0
                            }
                        }
                    }
                }
            </code-block>

            <chapter title="Functions" id="settings-all-validator-functions">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>fail</code></td>

                        <td>
                            Mark this validator as having failed, optionally providing a message for the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>failIf</code></td>

                        <td>
                            If the given value (or result of the given callback) is <code>true</code>, mark this
                            validator as having failed, optionally providing a message for the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>failIfNot</code></td>

                        <td>
                            If the given value (or result of the given callback) is <code>false</code>, mark this
                            validator as having failed, optionally providing a message for the user.
                        </td>
                    </tr>

                    <tr>
                        <td><code>pass</code></td>

                        <td>
                            Mark this validator as having passed successfully.
                            As this is the default state of a validator, this function is only useful when the
                            validator may have failed previously.
                        </td>
                    </tr>

                    <tr>
                        <td><code>passIf</code></td>

                        <td>
                            If the given value (or result of the given callback) is <code>true</code>, mark this
                            validator as having passed successfully.
                            As this is the default state of a validator, this function is only useful when the
                            validator may have failed previously.
                        </td>
                    </tr>

                    <tr>
                        <td><code>passIfNot</code></td>

                        <td>
                            If the given value (or result of the given callback) is <code>false</code>, mark this
                            validator as having passed successfully.
                            As this is the default state of a validator, this function is only useful when the
                            validator may have failed previously.
                        </td>
                    </tr>

                    <tr>
                        <td><code>Boolean.whenFalse</code></td>

                        <td>
                            Call the given block only when the <code>Boolean</code> receiver is <code>false</code>.
                            Returns <code>null</code> instead of the result of the block if the
                            <code>Boolean</code> is <code>true</code>.
                        </td>
                    </tr>

                    <tr>
                        <td><code>Boolean.whenTrue</code></td>

                        <td>

                            Call the given block only when the <code>Boolean</code> receiver is <code>true</code>.
                            Returns <code>null</code> instead of the result of the block if the
                            <code>Boolean</code> is <code>false</code>.
                        </td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Properties" id="settings-all-validator-properties">
                <table style="both">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>context</code></td>
                        <td><code>CommandContext</code></td>

                        <td>
                            Context object representing the current command execution.
                        </td>
                    </tr>

                    <tr>
                        <td><code>errorResponseKey</code></td>
                        <td><code>Key</code></td>

                        <td>
                            <p>
								<a href="Internationalization.topic" anchor="using-translations-translating-keys">
									Translation Key object,
								</a> which is used to format the error message when validation fails.
                            </p>

                            <p>
                                A plain string may not work here, as a single replacement value (the error message)
                                must be inserted by the translation system.
                            </p>

                            <p>
                                Defaults to <code>checks.responseTemplate</code>.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>message</code></td>
                        <td><code>String?</code></td>

                        <td>
                            <p>
                                Human-readable error message.
                                This message is usually provided by the relevant API functions and isn't usually
                                specified manually.
                            </p>

                            <p>
                                Defaults to <code>null</code>, which will result in a generic failure message.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>passed</code></td>
                        <td><code>Boolean</code></td>

                        <td>
                            Whether this validator has passed.
                            This property is modified by the relevant API functions, and isn't usually modified
                            manually.
                        </td>
                    </tr>

                    <tr>
                        <td><code>value</code></td>
                        <td><code>T</code></td>

                        <td>
                            The current argument's value.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Choice Converters" id="settings-choice">
            <p>
                Choice converters allow you to specify a set of predefined command options via a simple API.
            </p>

            <chapter title="Functions" id="settings-choice-functions">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>choice</code></td>

                        <td>
							<p>
								Add a choice.
							</p>

							<p>
								This function takes a
								<a href="Internationalization.topic" anchor="using-translations-translating-keys">
									Key object,
								</a> which will be shown to the user on Discord when using
								<a href="Slash-Commands.topic" />.
							</p>

							<p>
								When the command is submitted, the corresponding <code>value</code> will be provided
								as the value for your argument.
							</p>
                        </td>
                    </tr>

                    <tr>
                        <td><code>choices</code></td>

                        <td>
                            <p>
                                If you have a pre-defined map of choices, this function will use that map as the
                                predefined argument options.
                                This will replace any choices that may have been defined previously.
                            </p>

                            <p>
                                This map's
								<a href="Internationalization.topic" anchor="using-translations-translating-keys">
									Key objects
								</a> must represent a human-readable representation of their corresponding
                                values, as they'll be shown to the user on Discord.
                            </p>

                            <p>
                                If preferred, the <code>choices</code> property may be set directly instead.
                            </p>
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Coalescing Converters" id="settings-coalescing">
            <chapter title="Properties" id="settings-coalescing-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>ignoreErrors</code></td>
                        <td><code>Boolean</code></td>

                        <td>
                            Whether to ignore errors thrown while attempting to parse a given value, assuming no values
                            have been parsed yet.
                            This is <code>true</code> by default, but you may wish to set it to <code>false</code>
                            for coalescing arguments at the end of the list.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Defaulting Converters" id="settings-defaulting">
            <chapter title="Properties" id="settings-defaulting-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>defaultValue</code></td>
                        <td><code>T</code></td>

                        <td>
                            Value to use when the user doesn't provide this argument, or when it fails to parse and
                            <code>ignoreErrors</code> is set to <code>true</code>.
                        </td>
                    </tr>

                    <tr>
                        <td><code>ignoreErrors</code></td>
                        <td><code>Boolean</code></td>

                        <td>
                            Whether to ignore errors thrown while attempting to parse a given value.
                            This is <code>false</code> by default.
                            When set to <code>true</code>, the provided <code>defaultValue</code> will be used as the
                            argument value instead of returning an error to the user.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="List Converters" id="settings-list">
            <chapter title="Properties" id="settings-list-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>ignoreErrors</code></td>
                        <td><code>Boolean</code></td>

                        <td>
                            Whether to ignore errors thrown while attempting to parse a given value, assuming no values
                            have been parsed yet.
                            This is <code>false</code> by default.
                            When set to <code>true</code>, an empty list will be used as the argument value instead of
                            returning an error to the user.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Optional Converters" id="settings-optional">
            <chapter title="Properties" id="settings-optional-properties">
                <table style="header-row">
                    <tr>
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>ignoreErrors</code></td>
                        <td><code>Boolean</code></td>

                        <td>
                            Whether to ignore errors thrown while attempting to parse a given value.
                            This is <code>false</code> by default.
                            When set to <code>true</code>, <code>null</code> will be used as the argument value instead
                            of returning an error to the user.
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>
    </chapter>

    <chapter title="Bundled Converters" id="bundled">
        <p>
            Kord Extensions provides a number of converters for common data types, which you can make use of in your
            bots.
        </p>

        <note>
            Discord's slash commands do not have wide support for rich argument types.
            As a result, any converters that don't directly map to Discord entity types or primitive data types will
            appear as string arguments on Discord.
            For this reason, it's important that you provide a well-written description for your arguments, to explain
            exactly what data you want the user to provide.
        </note>

        <table style="both">
            <tr>
                <td>Type</td>
                <td>Description</td>
            </tr>

            <tr id="bundled-converters-general:header:text:center">
                <td colspan="3">General Converters</td>
            </tr>

            <tr>
                <td>Boolean</td>

                <td>
                    <p>
                        Boolean argument, with support for translated values.
                    </p>

                    <deflist collapsible="true">
                        <def title="Supported Inputs" id="boolean-inputs">
                            <p>
                                The list below shows all supported inputs in English.
                                Translated inputs are also supported.
                            </p>

                            <list>
                                <li>
                                    Truthy responses: <code>1</code>, <code>y</code>, <code>yes</code>, <code>t</code>,
                                    <code>true</code>
                                </li>

                                <li>
                                    Falsey responses: <code>0</code>, <code>n</code>, <code>no</code>, <code>f</code>,
                                    <code>false</code>
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Color</td>

                <td>
                    <p>
                        Color argument, supporting hex codes prefixed with <code>#</code> or <code>0x</code>, plain RGB
                        integers,
                        or color names matching
                        <a href="https://discord.com/branding#:~:text=Colours">Discord's branding colors</a>.
                    </p>

                    <p>
                        The values returned by this converter will be
                        <a href="https://dokka.kord.dev/common/dev.kord.common/-color/index.html">
                            Kord Color objects</a>.
                    </p>

                    <p>
                        Converter functions matching both US English ("color") and UK English ("colour") are available.
                        Translated color names are also supported.
                    </p>
                </td>
            </tr>

            <tr>
                <td>Decimal</td>

                <td>
                    <p>
                        Decimal argument, parsing the provided value into a Double.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="decimal-properties">
                            <list>
                                <li>
                                    <code>maxValue</code> (<code>Double?</code>) — Optionally, the maximum value that may be
                                    provided.
                                </li>

                                <li>
                                    <code>minValue</code> (<code>Double?</code>) — Optionally, the minimum value that may be
                                    provided.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Duration</td>

                <td>
                    <p>
                        Duration argument, using a complex parsing strategy to transform the provided value into a
                        <a href="https://kotlinlang.org/api/kotlinx-datetime/kotlinx-datetime/kotlinx.datetime/-date-time-period/">
                            DateTimePeriod</a> object.
                        This object is timezone-agnostic, and may need to be normalized against a specific timezone for
                        some use-cases.
                    </p>

                    <p>
                        This is also available as a coalescing converter.
                    </p>

                    <note>
                        When working with <a href="Chat-Commands.topic"/>, it may be beneficial to use the coalescing
                        version of this converter,
                        which will allow users to supply spaces in their input.
                    </note>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="duration-properties">
                            <list>
                                <li>
                                    <code>longHelp</code> (<code>Boolean</code>, default: <code>true</code>) — Whether to
                                    respond with a long help message explaining precisely how to specify a duration when the
                                    provided value cannot be parsed.
                                    If this has been set to <code>false</code>, only a short error stating that the duration
                                    could not be parsed will be provided.
                                </li>

                                <li>
                                    <code>positiveOnly</code> (<code>Boolean</code>, default: <code>true</code>) — Whether a
                                    positive duration is required.
                                    This may be set to <code>false</code> if you wish to allow users to specify a negative
                                    duration.
                                </li>
                            </list>
                        </def>
                    </deflist>

                    <p>
                        In addition to <a href="https://discord.com/developers/docs/reference#message-formatting">
                            Discord-formatted timestamps</a>,
                        this converter supports
                        specifying durations as a series of units and durations.
                    </p>

                    <deflist collapsible="true">
                        <def title="Specification" id="duration-specification">
                            <p>
                                Durations may be specified within a string,
                                as pairs containing both a unit and a numeric value.
                                Commas, spaces, and the plus character ("+") are removed from the provided string
                                before parsing.
                            </p>

                            <p>
                                Pairs may be specified in any order, and duplicate pairs will be added together (or
                                subtracted, in the case of a negative numeric value).
                                Both ordered forms are supported to allow for natural input in right-to-left languages:
                            </p>

                            <list>
                                <li>Value first: <code>12 days</code></li>
                                <li>Unit first: <code>d12</code></li>
                            </list>

                            <p>
                                Negative values may be specified by prefixing the numeric value with a minus sign
                                ("-").
                                Only base-10 ASCII integers are supported.
                            </p>
                        </def>

                        <def title="Supported units" id="duration-supported-units">
                            <p>
                                The list below shows all supported units, along with the names that may be used to refer
                                to them in English.
                                Translated names are also supported.
                            </p>

                            <list>
                                <li>
                                    Seconds: <code>s</code>, <code>sec</code>, <code>secs</code>, <code>second</code>,
                                    <code>seconds</code>
                                </li>

                                <li>
                                    Minutes: <code>m</code>, <code>mi</code>, <code>min</code>, <code>mins</code>,
                                    <code>minute</code>, <code>minutes</code>
                                </li>

                                <li>
                                    Hours: <code>h</code>, <code>hr</code>, <code>hour</code>, <code>hours</code>
                                </li>

                                <li>
                                    Days: <code>d</code>, <code>day</code>, <code>days</code>
                                </li>

                                <li>
                                    Weeks: <code>w</code>, <code>wk</code>, <code>week</code>, <code>weeks</code>
                                </li>

                                <li>
                                    Months: <code>mo</code>, <code>mth</code>, <code>month</code>, <code>months</code>
                                </li>

                                <li>
                                    Years: <code>y</code>,  <code>yr</code>, <code>year</code>, <code>years</code>
                                </li>
                            </list>
                        </def>

                        <def title="Examples" id="duration-examples">
                            <p>
                                The following examples are valid duration strings:
                            </p>

                            <list>
                                <li>
                                    <code>12d 4h 30m</code> - 12 days, 4 hours and 30 minutes.
                                </li>

                                <li>
                                    <code>12d 4h 30m -1 w</code> - 5 days (12 - 7), 4 hours and 30 minutes.
                                </li>

                                <li>
                                    <code>-2d 1w 6h -2h</code> - 5 days (7 - 2) and 4 hours (6 - 2).
                                </li>

                                <li>
                                    <code>周3 日2 分30</code> - in Simplified Chinese, 23 days (3 * 7 + 2) and 30
                                    minutes.
                                </li>
                            </list>

                            <p>
                                The following examples are invalid:
                            </p>

                            <list>
                                <li>
                                    <code>12</code> - bare numbers are not supported, a unit is required.
                                </li>

                                <li>
                                    <code>12m d w</code> - all units require a numerical value.
                                </li>

                                <li>
                                    <code>-5 days</code> with <code>positiveOnly = true</code> - the current converter
                                    only accepts positive durations.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Email</td>

                <td>
                    <p>
                        Email argument, validated using
                        <a href="https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/EmailValidator.html">
                            the Apache Commons email validator</a>.
                    </p>
                </td>
            </tr>

            <tr>
                <td>Enum</td>

                <td>
                    <p>
                        Arbitrary enum argument, allowing for the specification of enum value names.
                        By default, enum value names will be matched case-insensitively.
                        This is also available as a choice converter.
                    </p>

                    <p>
                        The enum to use is specified by providing a generic type parameter to the converter's builder
                        function.
                        This will be referred to as <code>E</code> below.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="enum-properties">
                            <list>
                                <li>
                                    <format style="bold">Required</format>: <code>typeName</code>
                                    (<code>Key</code>) —
									<a href="Internationalization.topic" anchor="using-translations-translating-keys">
										Key object
									</a> representing a human-readable short name for whatever the given enum
									represents.
                                    Should be no more than two or three words.
                                </li>

                                <li>
                                    <code>getter</code> (<code>suspend (String) -> E?</code>) — Optional getter
                                    function used to transform the input value into an enum value.
                                    By default, case-insensitively matches the input value against the enum value names.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Int</td>

                <td>
                    <p>
                        Integer argument, parsing the provided value into an Int.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="integer-properties">
                            <list>
                                <li>
                                    <code>maxValue</code> (<code>Int?</code>) — Optionally, the maximum value that
                                    may be provided.
                                </li>

                                <li>
                                    <code>minValue</code> (<code>Int?</code>) — Optionally, the minimum value that
                                    may be provided.
                                </li>

                                <li>
                                    <code>radix</code> (<code>Int</code>, default: <code>10</code>) — Optionally, the
                                    radix (base) to use to parse the value.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Long</td>

                <td>
                    <p>
                        Long argument, parsing the provided value into a Long.
                        This is also available as a choice converter, as a converter named <code>number</code>.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="long-properties">
                            <list>
                                <li>
                                    <code>maxValue</code> (<code>Int?</code>) — Optionally, the maximum value that
                                    may be provided.
                                </li>

                                <li>
                                    <code>minValue</code> (<code>Int?</code>) — Optionally, the minimum value that
                                    may be provided.
                                </li>

                                <li>
                                    <code>radix</code> (<code>Int</code>, default: <code>10</code>) — Optionally, the
                                    radix (base) to use to parse the value.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Regex</td>

                <td>
                    <p>
                        Regex argument, allowing users to specify a regular expression.
                    </p>

                    <warning>
                        <p>
                            Due to the inherent risks associated with making use of regular expressions from untrusted
                            sources
                            (such as <a href="https://www.regular-expressions.info/catastrophic.html">
                            catastrophic backtracking</a>),
                            it's best to limit access to commands that use this argument type.
                        </p>

                        <p>
                            If you still need to handle user-submitted regular expressions, it may be best to write
                            <a href="Custom-Converters.topic">a custom converter</a> using
                            <a href="https://github.com/google/re2j">Google's RE2 library</a>.
                        </p>
                    </warning>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="regex-properties">
                            <list>
                                <li>
                                    <code>options</code> (<code>MutableSet&lt;RegexOption&gt;</code>) — Set of regular
                                    expression options.
                                    Options added to this set will be used when creating the <code>Regex</code> object.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

			<tr>
				<td>Serialized</td>

				<td>
					<p>
						Serialized argument, converting values to the given type using
						<code>kotlinx.serialization</code>.
					</p>

					<warning>
						This isn't strictly how <code>kotlinx.serialization</code> is meant to be used.
						This is a best-effort attempt that allows you to support new argument types without writing a
						converter,
						and you should thoroughly test your bot before you deploy any code using this.
					</warning>

					<deflist collapsible="true">
						<def title="Converter Properties" id="serialized-properties">
							<list>
								<li>
									<format style="bold">Required</format>: <code>typeName</code>
									(<code>Key</code>) —
									<a href="Internationalization.topic" anchor="using-translations-translating-keys">
										Key object
									</a> representing a human-readable short name for whatever the given type
									represents.
									Should be no more than two or three words.
								</li>
							</list>
						</def>
					</deflist>
				</td>
			</tr>

            <tr>
                <td>String</td>

                <td>
                    <p>
                        String argument, providing users' input verbatim.
                        This is also available as a choice converter or coalescing converter.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="string-properties">
                            <list>
                                <li>
                                    <code>maxLength</code> (<code>Int?</code>) — Maximum length for the input string.
                                </li>

                                <li>
                                    <code>minLength</code> (<code>Int?</code>) — Minimum length for the input string.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Supported Locale</td>

                <td>
                    <p>
                        Supported locale argument, allowing users to provide one of Kord Extensions' supported locales.
                        This converter will return a <code>Locale</code> object if the specified locale is one that
                        Kord Extensions supports.
                    </p>

                    <p>
                        If a locale you need isn't supported, please feel free to
                        <a href="https://hosted.weblate.org/projects/kord-extensions/">
                            contribute translations for it</a>.
                    </p>
                </td>
            </tr>

            <tr id="bundled-converters-entities:header:text:center">
                <td colspan="3">Discord Entities</td>
            </tr>

            <tr>
                <td>Channel</td>

                <td>
                    <p>
                        Discord channel argument, supporting mentions, IDs, and names.
                        Also supports <format style="bold">"this"</format> to refer to the current channel.
                    </p>

                    <p>
                        When working with slash commands, the Discord client resolves the channel object instead of the
                        bot.
                        This means that the converter will only ever return the channel object provided by the client,
                        and cannot resolve the special name "this."
                        It will also ignore the <code>requiredGuild</code> and <code>requireSameGuild</code> properties.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Functions" id="channel-functions">
                            <list>
                                <li>
                                    <code>requireChannelType(type: ChannelType)</code> — Require that the resolved channel be
                                    of the specified type.
                                    May be called multiple times for multiple channel types.
                                </li>
                            </list>
                        </def>

                        <def title="Converter Properties" id="channel-properties">
                            <list>
                                <li>
                                    <code>requiredChannelTypes</code> (<code>MutableSet&lt;ChannelType&gt;</code>) — Require
                                    that the resolved channel be of one of the supplied types.
                                    Calls to <code>requireChannelType</code> will add the provided type to this set.
                                </li>

                                <li>
                                    <code>requiredGuild</code> (<code>suspend () -> Snowflake</code>) — Limit channel
                                    resolution to a specific guild ID.
                                </li>

                                <li>
                                    <code>requireSameGuild</code> (<code>Boolean</code>, default: <code>true</code>) — Limit
                                    channel resolution to channels on the same guild the command was executed within.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Emoji</td>

                <td>
                    <p>
                        Emoji argument, supporting Unicode emojis, guild emoji IDs, guild emoji names, and Unicode
                        emoji names as used by Discord's emoji picker.
                        Guild emoji IDs may be specified with or without surrounding colons, or specified using the
                        emoji mentions that the Discord client inserts into messages.
                    </p>

                    <p>
                        When a guild emoji is specified, it must come from a guild the bot is present on.
                        If a guild emoji is specified only by name, the first emoji the bot finds from its guilds is
                        used.
                    </p>

	                <warning>
		                When a guild emoji is specified, Kord Extensions will always fail to find it unless your bot
		                has the <code>GuildEmojis</code> intent enabled in
		                <a href="Config-Intents.topic">the intents configuration</a>.
	                </warning>
                </td>
            </tr>

            <tr>
                <td>Guild</td>

                <td>
                    <p>
                        Discord guild argument, supporting IDs and names.
                        Also supports <format style="bold">"this"</format> to refer to the current guild.
                    </p>

                    <p>
                        The guild specified must be a guild the bot is present on.
                    </p>
                </td>
            </tr>

            <tr>
                <td>Member</td>

                <td>
                    <p>
                        Discord guild member argument, supporting mentions, IDs, usernames, tags, and names.
                        Also supports <format style="bold">"me"</format> to refer to the member running the command,
                        and <format style="bold">"you"</format> to refer to the bot.
                    </p>

                    <p>
                        When working with slash commands, the Discord client resolves the member object instead of the
                        bot.
                        This means that the converter will only ever return the member object provided by the client,
                        and cannot resolve the special names "me" or "you."
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="guild-properties">
                            <list>
                                <li>
                                    <code>requiredGuild</code> (<code>suspend () -> Snowflake</code>) — Limit member
                                    resolution to a specific guild ID.
                                    This will additionally require the command to be run on the guild represented by
                                    that ID.
                                </li>

                                <li>
                                    <code>requireSameGuild</code> (<code>Boolean</code>, default: <code>true</code>) —
                                    Limit member resolution to users on the same guild the command was executed
                                    within.
                                </li>

                                <li>
                                    <code>useReply</code> (<code>Boolean</code>, default: <code>true</code>) — For
                                    <a href="Chat-Commands.topic"/>, whether to use the author of the replied-to
                                    message (when there is one).
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Message</td>

                <td>
                    <p>
                        Discord message argument, supporting message jump URLs and IDs.
                        When a message ID is specified, it's assumed to be in the same channel the command was executed
                        within.
                    </p>

                    <p>
                        Messages will be retrieved if they're not already in Kord's cache, which requires the bot to
                        be able to see the message in question.
                        When using a URL, the bot cannot resolve messages in DMs.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="message-properties">
                            <list>
                                <li>
                                    <code>requiredGuild</code> (<code>suspend () -> Snowflake</code>) — Limit message
                                    resolution to a specific guild ID.
                                    This will additionally require the command to be run on the guild represented by
                                    that ID.
                                </li>

                                <li>
                                    <code>requireGuild</code> (<code>Boolean</code>, default: <code>true</code>) —
                                    If <code>requiredGuild</code> is specified, limit message resolution to the guild
                                    returned by that property.
                                    Otherwise, limit message resolution to the same guild the command was executed
                                    within.
                                </li>

                                <li>
                                    <code>useReply</code> (<code>Boolean</code>, default: <code>true</code>) — For
                                    <a href="Chat-Commands.topic"/>, whether to use the replied-to message
                                    (when there is one).
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Role</td>

                <td>
                    <p>
                        Discord role argument, supporting role mentions, names, and IDs.
                        Role resolution via commands run in DMs is not supported.
                    </p>

                    <p>
                        When working with slash commands, the Discord client resolves the role object instead of the
                        bot.
                        This means that the converter will only ever return the role object provided by the client,
                        and the <code>requiredGuild</code> property will be ignored.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="role-properties">
                            <list>
                                <li>
                                    <code>requiredGuild</code> (<code>suspend () -> Snowflake</code>) — Limit role
                                    resolution to a specific guild ID.
                                    When omitted, this will default to the guild the command was executed within.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Snowflake</td>

                <td>
                    <p>
                        Discord snowflake argument.
                        Parses the given value into a <code>Snowflake</code> object.
                    </p>
                </td>
            </tr>

            <tr>
                <td>Tag</td>

                <td>
                    <p>
                        Discord forum channel tag argument.
                        Provides built-in <a anchor="settings-all-autocomplete"/> support for tags based on the
                        current channel or the <code>channelGetter</code> property.
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="tag-properties">
                            <list>
                                <li>
                                    <code>channelGetter</code> (<code>suspend () -> ForumChannel?</code>) — Limit tag
                                    resolution to the given forum channel.
                                    This is used for both auto-completion and tag resolution on command execution.
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr>
                <td>Timestamp</td>

                <td>
                    <p>
                        Discord timestamp argument.
                        Parses a
                        <a href="https://discord.com/developers/docs/reference#message-formatting">
                            Discord-formatted timestamp</a> into a <code>FormattedTimestamp</code> object,
                        which includes the corresponding <code>Instant</code> and <code>TimestampType</code>.
                    </p>

                    <p>
                        This converter only supports Discord-formatted timestamps, and is unable to parse any other
                        form of timestamp.
                    </p>
                </td>
            </tr>

            <tr>
                <td>User</td>

                <td>
                    <p>
                        Discord user argument supporting mentions, IDs, usernames, and tags.
                        Also supports <format style="bold">"me"</format> to refer to the member running the command,
                        and <format style="bold">"you"</format> to refer to the bot.
                    </p>

                    <p>
                        When working with slash commands, the Discord client resolves the user object instead of the
                        bot.
                        This means that the converter will only ever return the user object provided by the client,
                        and cannot resolve the special names "me" or "you."
                    </p>

                    <deflist collapsible="true">
                        <def title="Converter Properties" id="user-properties">
                            <list>
                                <li>
                                    <code>useReply</code> (<code>Boolean</code>, default: <code>true</code>) — For
                                    <a href="Chat-Commands.topic"/>, whether to use the author of the replied-to
                                    message (when there is one).
                                </li>
                            </list>
                        </def>
                    </deflist>
                </td>
            </tr>

            <tr id="bundled-converters-slash-only:header:text:center">
                <td colspan="3">Slash Commands Only</td>
            </tr>

            <tr>
                <td>Attachment</td>

                <td>
                    <p>
                        A file attachment, as provided in a slash command invocation.
                        Discord will display a drop target for this type of argument.
                    </p>
                </td>
            </tr>
        </table>
    </chapter>
</topic>
