<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="KordEx Plugin" id="KordEx-Plugin">

    <show-structure depth="2" />

    <title>KordEx Plugin</title>

    <tldr>
        <p>
            <format style="bold">Plugin ID:</format>
            <code>dev.kordex.gradle.kordex</code>
        </p>

        <p>
            <format style="bold">Plugin Version:</format>
            %plugin-version%
        </p>
    </tldr>

    <p>
        The KordEx Gradle plugin is a Gradle plugin designed to make it easier to correctly configure Gradle projects
        containing Kord Extensions bots and plugins.
        This plugin is the recommended way to configure your project, but
        <a href="Manual-Setup.topic">you can also set things up manually</a> if you're not using a Kotlin Gradle build
        script, or otherwise can't (or don't wish to) use the plugin.
    </p>

    <chapter title="Features" id="features">
        <p>
            The KordEx plugin is designed to automatically set up your Gradle project to work with Kord Extensions.
            As of this writing, it can handle the following for you:
        </p>

        <list type="bullet">
            <li>
                <p>
                    Automatic configuration of Maven repositories:
                </p>

                <list type="bullet">
                    <li>KordEx, Google, Maven Central and OSSRH.</li>

                    <li>
                        When using <a href="Mappings.topic">the Mappings module</a>: FabricMC, QuiltMC, Shedaniel and
                        JitPack.
                    </li>
                </list>
            </li>

            <li>
                <p>
                    Automatic configuration of relevant dependencies:
                </p>

                <list type="bullet">
                    <li>Both Kord and Kord Extensions.</li>

                    <li>
                        <p>Any dependencies required by configured first-party modules:</p>

                        <list type="bullet">
                            <li>
                                When using <a href="MongoDB.topic">the MongoDB data adapter</a>: The latest versions
                                of the Kotlin Coroutines MongoDB driver, and the BSON adapter for kotlinx.serialization.
                            </li>
                        </list>
                    </li>
                </list>
            </li>

            <li>
                <p>
                    Configuration of several Gradle plugins:
                </p>

                <list type="bullet">
                    <li>
                        The Kotlin plugin — Setting the required Kotlin compiler arguments and setting the same JVM
                        target used by Kord Extensions.
                    </li>

                    <li>
                        The Java plugin — Setting the same Java source/target compatibility settings used by Kord
                        Extensions.
                    </li>

                    <li>
                        If the KSP plugin is applied, automatically adding the Kord Extensions annotation processor.
                    </li>
                </list>
            </li>

            <li>
                Validation checks, including checking whether you're using the correct version of the Kotlin plugin for
                the version of Kord Extensions you're working with.
                You can disable this if needed.
            </li>

            <li>
                <p><b>When configured for bot development:</b></p>

                <list type="bullet">
                    <li>
                        Automatic configuration of the <code>application</code> plugin and <code>jar</code> task.
                    </li>

                    <li id="dev-task">
                        <p>
                            <format style="bold">New in v1.3.1:</format>
                            Creation of the <code>dev</code> task, used to run your bot in development mode.
                        </p>

                        <p>
                            This task will recursively parse <code>.env</code> files in your project directories,
                            adding them to your in-development bot's runtime environment variables:
                        </p>

                        <list type="bullet">
                            <li>First, it parses the <code>.env</code> file in your project's root directory.</li>

                            <li>
                                Then, if your bot is in a subproject/submodule, it'll parse <code>.env</code> files
                                found while traversing the directory tree down to it, and overriding any previously set
                                variables.
                            </li>

                            <li>
                                Finally, it'll parse the <code>.env</code> file in your bot's module, as previously
                                described.
                            </li>

                            <li>
                                This may be configured by setting <code>processDotEnv</code>
                                <a anchor="process-dot-env">as explained below</a>.
                            </li>
                        </list>
                    </li>

                    <li>
                        Easy configuration of Kord Extensions' default data collection settings.
                    </li>

                    <li>
                        <p>
                            Generation of the <code>kordex.properties</code> resource file, which is automatically
                            added to your bot's resources.
                            This file contains:
                        </p>

                        <list type="bullet">
                            <li>Your configured data collection settings.</li>
                            <li>The version of Kord and Kord Extensions you're using.</li>
                            <li>A list of first-party Kord Extensions modules you're using.</li>
                        </list>

                        <p>
                            You should not provide this yourself, as missing some data will break parts of
                            Kord Extensions.
                        </p>
                    </li>
                </list>
            </li>

			<li>
				<b>When configured for i18n work:</b> automatic generation of translation classes containing your
				translation bundle and translation keys.
			</li>

            <li>
                <p><b>When configured for plugin development:</b></p>

                <list type="bullet">
                    <li>
                        Automatic configuration of the <code>distribution</code> plugin.
                    </li>

                    <li>
                        Generation of the <code>plugin.properties</code> resource file, which is automatically added to
                        your plugin's distribution.
                        This file contains plugin metadata based on your configuration.
                    </li>

                    <li>
                        <p>
                            Automatic plugin packaging via the <code>distZip</code> task, including:
                        </p>

                        <list type="bullet">
                            <li>Your plugin's classes, placed within the <code>classes</code> directory.</li>
                            <li>Your plugin's resources, also placed within the <code>classes</code> directory.</li>
                            <li>Your plugin's runtime dependencies, placed within the <code>lib</code> directory.</li>
                            <li>Your plugin's metadata, in the <code>plugin.properties</code> file.</li>
                        </list>
                    </li>
                </list>
            </li>
        </list>
    </chapter>

    <chapter title="Setting Up" id="setting-up">
		<p>
			First, add the required Maven repos to your <code>settings.gradle.kts</code>.
		</p>

		<code-block lang="kotlin">
			pluginManagement {
				repositories {
					gradlePluginPortal()
					mavenCentral()

					maven("https://snapshots-repo.kordex.dev")
					maven("https://releases-repo.kordex.dev")
				}
			}
		</code-block>

        <p>
            Next, add the KordEx Gradle plugin to your <code>settings.gradle.kts</code>
			or <code>build.gradle.kts</code>.
        </p>

        <code-block lang="kotlin">
            plugins {
                id("dev.kordex.gradle.kordex") version "%plugin-version%"
            }
        </code-block>

        <p>
            Then, if needed, configure it as explained below.
        </p>

        <code-block lang="kotlin">
            kordEx {
                // Settings go here.
            }
        </code-block>
    </chapter>

    <chapter title="Configuration" id="settings">
        <include from="Snippets.topic" element-id="transitive-deps-plugin" />

        <p>
            All settings must be provided within the <code>kordEx { }</code> builder.
            If you don't configure it for either bot or plugin development, then the plugin won't do anything.
        </p>

        <p>
            All settings are defined using Gradle <code>Property</code> objects.
        </p>

        <warning>
            <p>
                You may only configure a Gradle project for either bot or plugin development, not both.
                If you need to build both in the same project, you should
                <a href="https://docs.gradle.org/current/userguide/intro_multi_project_builds.html">
                    separate them using Gradle subprojects
                </a>.
            </p>
        </warning>

        <chapter title="Basic Settings" id="settings-basic">
            <p>
                The following settings apply to both the bot and plugin modes,
                but they'll also be used when neither mode is specified.
            </p>

            <table style="both">
                <tr>
                    <td>Property</td>
                    <td>Default</td>
                    <td>Description</td>
                </tr>

                <tr>
                    <td><code>addDependencies</code></td>
                    <td><code>true</code></td>

                    <td>
                        <p>
                            <format style="bold">New in v1.2.1:</format>
                            Whether to automatically add the required dependencies for a standard Kord Extensions setup.
                        </p>

                        <p>
                            If you need to create a "common" module depended on by bots, you may wish to set this
                            property to <code>false</code> in your bot modules to avoid duplicate dependencies.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>addRepositories</code></td>
                    <td><code>true</code></td>

                    <td>
                        <p>
                            Whether to automatically add the required Maven repositories for a standard Kord
                            Extensions setup.
                        </p>

                        <p>
                            If you need to use a fork of either Kord or Kord Extensions, you may want to disable this
                            and set up your repositories manually.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>configurations</code></td>
                    <td> </td>

                    <td>
                        <p>
                            A list of dependency configurations to use for the automatically added dependencies,
                            overriding the default configuration used.
                        </p>

                        <p>
                            The default configuration is <code>implementation</code>, or <code>compileOnly</code> in
                            plugin mode.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>ignoreIncompatibleKotlinVersion</code></td>
                    <td><code>false</code></td>

                    <td>
                        <p>
                            By default, your build will fail if the version of the Kotlin Gradle plugin you're using
                            doesn't match the version of Kotlin used to compile Kord Extensions.
                        </p>

                        <p>
                            If you wish to use a different Kotlin version (and you know what you're doing), setting
                            this property to <code>true</code> will make this a warning instead.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>jvmTarget</code></td>
                    <td> </td>

                    <td>
                        <p>
                            An integer, representing the JVM version your project should target.
                        </p>

                        <p>
                            By default, this will be set to the minimum JVM version required by Kord Extensions, but
                            you may need to change this setting if one of your dependencies requires a newer JVM
                            version.
                        </p>

                        <p>
                            The minimum JDK version required by Kord Extensions is version %java-version%.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>kordVersion</code></td>
                    <td> </td>

                    <td>
                        <p>
                            Specify a specific Kord version if you need to.
                            Alternatively,
                            supply <code>"latest"</code> and the plugin will try to find
                            <format style="bold">the latest non-feature-branch version</format> of Kord.
                        </p>

                        <p>
                            By default, the Kord version used to build the selected version of Kord Extensions is used.
                        </p>

                        <p>
                            You'll want to specify a version yourself if you need to use your own fork of Kord.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>kordExVersion</code></td>
                    <td><code>latest</code></td>

                    <td>
                        <p>
                            Specify a specific Kord Extensions version if you need to.
                            Alternatively,
                            supply <code>"latest"</code> and the plugin will try to find the latest version of Kord
                            Extensions.
                        </p>

                        <p>
                            By default, the latest released version of Kord Extensions is used, which will usually be
                            a snapshot.
                        </p>

                        <p>
                            Depending on snapshots is the intended way to use Kord Extensions, but you'll want to
                            specify a version yourself if you need to hold back an update or use your own fork of
                            Kord Extensions.
                        </p>
                    </td>
                </tr>
            </table>

            <chapter title="Modules" id="settings-modules">
                <p>
                    Many first-party Kord Extensions modules exist that provide extra development tools and various
                    user-facing bot functions.
                </p>

                <p>
                    The repository layout is currently
                    <a href="https://kordex.dev/blog/2024-07-23/kordex-2#module-flattening">a bit messy</a>,
                    but it'll be cleaned up for the upcoming 2.0.0 release of Kord Extensions.
                </p>

                <p>
                    In the meantime, check the above link for information on how to find our first-party modules.
                    Modules are named according to their containing folder —
                    for example, the PluralKit module is located in <code>extra-modules/extra-pluralkit</code>,
                    so the module name is <code>extra-pluralkit</code>.
                </p>

                <table style="both">
                    <tr>
                        <td>Function</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>module</code></td>

                        <td>
                            <p>
                                Add a first-party Kord Extensions module by name.
                                The KordEx plugin will also automatically add any extra dependencies and repositories
                                that the specified module requires.
                            </p>
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Bot Development" id="settings-bot">
            <primary-label ref="gradle-1.1.0"/>

            <p>
                To configure your project for bot development, use the <code>bot { }</code> builder in the
                <code>kordEx { }</code> builder.
                For example:
            </p>

            <p>
                Bots should be built by running the <code>build</code> task.
            </p>

            <code-block lang="kotlin" collapsed-title="Example" collapsible="true">
                kordEx {
                    bot {
                        // https://docs.kordex.dev/data-collection.html#levels
                        dataCollection(DataCollection.Standard)

                        mainClass = "my.package.MyMainClass"
                    }
                }
            </code-block>

			<p>
				All below properties are optional.
			</p>

            <table style="both">
                <tr>
                    <td>Property</td>
                    <td>Default</td>
                    <td>Description</td>
                </tr>

				<tr>
					<td><code>mainClass</code></td>
					<td> </td>

					<td>
						Your bot's main class, which will usually refer to a top-level <code>main</code> function.
						Providing this will automatically apply and configure the <code>application</code> plugin,
						and add the main class reference to your bot's JAR manifest, making the built JAR executable.
					</td>
				</tr>

                <tr id="process-dot-env">
                    <td><code>processDotEnv</code></td>
                    <td><code>true</code></td>

                    <td>
                        <format style="bold">New in v1.3.1:</format>

                        <p>
                            Whether to recursively parse <code>.env</code> files when setting up the <code>dev</code>
                            task, <a anchor="dev-task">as explained here</a>.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>voice</code></td>
                    <td><code>true</code></td>

                    <td>
                        <p>
                            Whether to use Kord's voice-enabled core module when depending on it.
                        </p>

                        <p>
                            By default, this is enabled, which means that <code>kord-core-voice</code> will be used.
                            However, if your bot doesn't need to support Discord voice, you can set this property to
                            <code>false</code> and <code>kord-core</code> will be used instead.
                        </p>

                        <p>
                            Using a version of Kord that doesn't support Discord voice may result in a smaller JAR
                            when your bot is built.
                        </p>
                    </td>
                </tr>
            </table>

            <chapter title="Data Collection" id="data-collection">
                <primary-label ref="v2" />

                <tip>
                    <p>
                        For in-depth information on the data collection system, please see
                        <a href="Data-Collection.topic">the dedicated documentation</a>.
                    </p>
                </tip>

                <p>
                    The default data collection level is <format style="bold">Standard</format>.
                </p>

                <table style="both">
                    <tr>
                        <td>Function</td>
                        <td>Description</td>
                    </tr>

                    <tr>
                        <td><code>dataCollection</code></td>

                        <td>
                            <p>
                                Set your bot's default <a href="Data-Collection.topic" /> level to the given argument.
                            </p>

                            <p>
                                <format style="bold">Note:</format> Users may override this at runtime using a
                                system property or an environmental variable.
                                It may also be manually configured in code,
                                <a href="Config-Basic.topic" anchor="v2-properties">as explained here</a>.
                            </p>
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="Plugin Development" id="settings-plugin">
            <primary-label ref="gradle-1.1.0" />

            <p>
                To configure your project for plugin development, use the <code>plugin { }</code> builder in the
                <code>kordEx { }</code> builder.
                For example:
            </p>

            <code-block lang="kotlin" collapsed-title="Example" collapsible="true">
                kordEx {
                    plugin {
                        id = "my-plugin-id"
                        pluginClass = "my.package.MyPluginClass"
                        version = "1.0.0"
                    }
                }
            </code-block>

            <p>
                Plugins should be built by running the <code>distZip</code> task.
            </p>

            <table style="both">
                <tr>
                    <td>Property</td>
                    <td>Description</td>
                </tr>

                <tr id="settings-plugin-required:header:text:center">
                    <td colspan="2">
                        Required Properties
                    </td>
                </tr>

                <tr>
                    <td><code>id</code></td>

                    <td>
                        <p>
                            A unique ID that identifies your plugin.
                            This should be a short string, written using <code>lower-kebab-case</code>.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>pluginClass</code></td>

                    <td>
                        <p>
                            A reference to your plugin's main class, which must extend <code>KordExPlugin</code>.
                            This must include both the package and class name — for example,
                            <code>my.package.here.ClassNameHere</code>
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>version</code></td>

                    <td>
                        <p>
                            Your plugin's version number, which must be
                            <a href="https://semver.org/">a valid semantic version number</a>.
                        </p>
                    </td>
                </tr>

                <tr id="settings-plugin-optional:header:text:center">
                    <td colspan="2">
                        Optional Properties
                    </td>
                </tr>

                <tr>
                    <td><code>author</code></td>

                    <td>
                        <p>
                            Whoever is responsible for this plugin.
                            This can be a single person, a comma-separated list of people, an email address,
                            an organization, or anything else you feel is appropriate.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>description</code></td>

                    <td>
                        <p>
                            A block of text that explains what your plugin is, what it does, and provides any other
                            relevant information.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>license</code></td>

                    <td>
                        <p>
                            The license your plugin is distributed under.
                            This does not have to be an open-source license.
                        </p>
                    </td>
                </tr>

                <tr id="settings-plugin-functions:header:text:center">
                    <td colspan="2">
                        Optional Functions
                    </td>
                </tr>

                <tr>
                    <td><code>dependency</code></td>

                    <td>
                        <p>
                            Call this function to add a dependency on another plugin.
                            This function expects the following arguments:
                        </p>

                        <list type="bullet">
                            <li><code>id</code> — the ID of the plugin you wish to depend on.</li>

                            <li>
                                <code>versionSpecifier</code> (Optional) — A
                                <a href="https://github.com/zafarkhaja/jsemver#range-expressions">JSemver range expression</a>
                                describing which versions of the specified plugin are compatible with your plugin.
                            </li>

                            <li>
                                <p>
                                    <code>optional</code> (Default: <code>false</code>) — Whether this is an optional
                                    dependency.
                                </p>

                                <p>
                                    Optional dependencies are useful when your plugin optionally integrates with others,
                                    ensuring that the other plugin is a compatible version before your plugin is
                                    loaded.
                                </p>
                            </li>
                        </list>
                    </td>
                </tr>

                <tr>
                    <td><code>kordExVersion</code></td>

                    <td>
                        <p>
                            Call this function to specify which versions of Kord Extensions your plugin is compatible
                            with.
                            You must provide a
                            <a href="https://github.com/zafarkhaja/jsemver#range-expressions">JSemver range expression</a>
                            as the first argument to this function.
                        </p>
                    </td>
                </tr>
            </table>
        </chapter>

        <chapter title="I18n Work" id="settings-i18n">
            <primary-label ref="gradle-1.5.0" />

			<warning>
				<p>
					The Gradle plugin only supports i18n work when using Kord Extensions 2.3.0 or later.
				</p>
			</warning>

            <p>
                To configure your project for i18n work, use the <code>i18n { }</code> builder in the
                <code>kordEx { }</code> builder.
                For example:
            </p>

            <code-block lang="kotlin" collapsed-title="Example" collapsible="true">
                kordEx {
                    i18n {
                        classPackage = "template.i18n"
						translationBundle = "template.strings"
                    }
                }
            </code-block>

            <p>
                Once configured for i18n work, the Gradle plugin will automatically generate a tree of translation
				classes, containing your translation bundle and all of your translation keys.
				The translation keys are taken from the corresponding base translation properties file in your
				project's <path>src/main/resources/translations/</path> directory.
            </p>

			<p>
				A translation class tree looks something like this:
			</p>

			<code-block lang="kotlin">
				public object Translations {
					public val bundle: Bundle = Bundle("template.strings")

					public object Commands {
						public object Slap {
							/**
							 * slaps {0} with their {1}
							 */
							public val action: Key = Key("commands.slap.action")
								.withBundle(Translations.bundle)

							/**
							 * Ask the bot to slap another user
							 */
							public val description: Key = Key("commands.slap.description")
								.withBundle(Translations.bundle)
						}
					}
				}
			</code-block>

			<p>
				For more information on the i18n system and how translations work, see
				<a href="Internationalization.topic">the dedicated documentation</a>.
			</p>

            <table style="both">
                <tr>
                    <td>Property</td>
                    <td>Description</td>
                </tr>

                <tr id="settings-i18n-required:header:text:center">
                    <td colspan="2">
                        Required Properties
                    </td>
                </tr>

                <tr>
                    <td><code>classPackage</code></td>

                    <td>
                        <p>
                            The package the plugin should use when generating your translation classes.
							Generated classes will be placed within this package.
                        </p>
                    </td>
                </tr>

                <tr>
                    <td><code>translationBundle</code></td>

                    <td>
                        <p>
                            The name of your
							<a href="Internationalization.topic" anchor="basic-concepts-bundles">translation bundle</a>.
							This is used to locate your default translations file, and is automatically added to each
							<code>Key</code> object in the generated classes.
                        </p>
                    </td>
                </tr>

                <tr id="settings-i18n-optional:header:text:center">
                    <td colspan="2">
                        Optional Properties
                    </td>
                </tr>

                <tr>
                    <td><code>className</code></td>

                    <td>
                        <p>
                            The name to use for the root class of the generated translation class tree.
                        </p>

						<p>
							Defaults to <code>Translations</code>.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>configureSourceSet</code></td>

                    <td>
                        <p>
                            Whether to automatically configure your project's source-sets to include the generated
							translation classes.
                        </p>

						<p>
							Defaults to <code>true</code>.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>outputDirectory</code></td>

                    <td>
                        <p>
                            Where to place the generated translation classes.
							Regardless of this setting, generated classes are additionally placed within a generated
							directory structure matching the configured <code>classPackage</code> setting.
                        </p>

						<p>
							Defaults to <path>build/generated/kordex/main/kotlin/</path>.
						</p>
                    </td>
                </tr>

                <tr>
                    <td><code>publicVisibility</code></td>

                    <td>
                        <p>
                            Whether to use the <code>public</code> visibility modifier for generated objects.
							Set this to <code>false</code> to use <code>internal</code> instead.
                        </p>

						<p>
							Defaults to <path>true</path>.
						</p>
                    </td>
                </tr>
            </table>
        </chapter>
    </chapter>
</topic>
